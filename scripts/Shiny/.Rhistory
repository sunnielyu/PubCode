data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE)
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
library(GGally)
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
library(ggplot2)
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
str(mtcars)
names(ret)
ret[["Plot_5"]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE)
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",k)]] <- p
k=k+1
}
names(ret)
ret[["Plot_1"]]
ret[["Plot_2"]]
ret[["Plot_3"]]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",k)]] <- p
k=k+1
}
dev.off()
names(ret)
ret[["Plot_1"]]
ret[["Plot_2"]]
ret[["Plot_3"]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j]] <- p
k=k+1
}
names(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j]] <- p
k=k+1
}
str(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret <- vector("list", 3)
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j - 2]] <- p
k=k+1
}
names(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
getwd()
setwd("~/Desktop/PubCode/Shiny")
library(rsconnect)
deployApp("interactiveUIndex")
deployApp("interactiveUIndex", account="pubcode")
deployApp("interactiveUIndex", account="pubcode")
deployApp("interactiveUIndex", account="pubcode")
getwd()
deployApp("interactiveUIndex", account="pubcode")
rm(list=ls())
dev.off()
getwd()
setwd("~/Desktop/PubCode/Shiny/makeData-interactiveUIndex")
rm(list=ls())
dev.off()
datList = list()
k = 143619
for (i in 2000:2015){
datList[[i]] <- fread(paste0('https://datadryad.org/bitstream/handle/10255/dryad.', k, '/uindex_', i, '.csv?sequence=1'))
k=k+1
}
library(data.table)
datList = list()
k = 143619
for (i in 2000:2015){
datList[[i]] <- fread(paste0('https://datadryad.org/bitstream/handle/10255/dryad.', k, '/uindex_', i, '.csv?sequence=1'))
k=k+1
}
# Multiple sequence alignment tools plotted in Figure 2A from Callahan, A. et al. doi: 10.1038
paperVector = c("muscle","clustal","mafft","guidance","embl-ebi","nast","embl-ebiweb","tcoffee","endscript","kalign","expresso")
# Create a data frame that contains the uIndex for each year for each paper in paperVector
df = setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("Year", "uIndex", "Paper"))
for (j in 1:length(paperVector)){
for (i in 2000:2015){
currUIndex = datList[[i]][which(key==paperVector[j]),]$u_index
# Set the value to "NA" if there is no uIndex for given year and paper
if (length(currUIndex)==0){
currUIndex = "NA"
}
df = rbind(df, cbind(Year=i, uIndex=currUIndex, Paper = paperVector[j]))
}
}
# Remove rows that have uIndex with value "NA" or "NULL"
df = df[which(df$uIndex!="NA"),]
df = df[which(df$uIndex!="NULL"),]
# Change the columns of data frame so in correct format for interactive plot
df$Year = as.numeric(as.character(df$Year))
df$uIndex = as.numeric(as.character(df$uIndex))
df$Paper = as.character(df$Paper)
save(df, "df.rda")
??save
save(df, file="df.rda")
rm(list=ls())
getwd()
setwd("~/Desktop/PubCode/Shiny/interactiveUIndex")
load("df.rda")
ls()
setwd("~/Desktop/PubCode/Shiny")
rm(list=ls())
deployApp("interactiveUIndex")
deployApp("interactiveUIndex", account="pubcode")
rm(list=ls())
getwd()
dev.off()
deployApp("interactiveUIndex", account="pubcode")
deployApp("interactiveUIndex", account="pubcode")
